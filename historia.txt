Listado de comandos:

cd - Permite navegar en las diferentes carpetas.
cwd - permite ver la carpeta en la que me encuentro actualmente.
pwd - me muestra el path de la carpeta en la que estoy.
cd .. - permite volver a la carpeta anterior.
rm - permite eliminar un archivo/ OJO hay que mencionar el nombre del
     archivo a eliminar.
cd --help - Permite ver una descripcíon del comando antes del "--help"
ls - permite enlistar los archivos dentro de una carpeta.
git init - permite iniciar la carpeta Git.
git status - permite conocer el status del repositorio Git.
git add - permite añadir un documento al repositorio para ser trackeado.
git config - permite configurar el entorno de trabajo en Git.
git config --global user.name "  " - Permite configurar el usuario.
git config --global user.email "  " - Permite configurar el correo.
git commit - envía los cambios del archivo al repositorio sin comentarios.
git commit -m "  " - Envía los cambios del documento al repositorio con comentarios.
git log - Permite ver el historial de cambios de un documento.
git diff - permite ver la diferencia entre dos versionas. hay que copiar los
           códigos de cada commit separados de un espacio.
git reset --hard - Resetea el documento a la versión indicada.
git reset --soft - Resetea el documento a la versión indicada pero deja los cambios en Staging disponibles.
git checkout - permite volver a una versión de un documento ingresando el código del commit.
git checkout master - permite volver a la versión master de un documento.
git push - permite enviar la información del repositorio local al repositorio remoto (GitHub).
git fetch - permite traer una actualización de un repositorio remoto al repositorio local.
git merge - copia la última versión del repositorio local en el directorio de trabajo.
git pull - fusiona los comandos de fetch y merge.

*Siempre que se va a hacer un merge de dos braches, se debe hacer desde la rama master, o 
desde la rama a la que queremos fusionar los cambios que se hicieron en la rama
paralela.

* LLaves públicas y Privadas:

1. Configurar llave SSH -

ssh-keygen -t rsa -b 4096 -C "oscard.guerrerom@outlook.com"

2. Abrir la carpeta en la que se guardan las llaves pública y privada.
3. Revisar que el servidor SSH esté encendido.
     * eval $(ssh-agent -s)
4. Agregar la llave al servidor.
     buscar la carpeta en la que se guardó la llave.
5. Estando en la carpeta se ingresa el siguiente comando:
     ssh-add ~/.ssh/id_rsa
6. En Github se crea un nuevo repositorio.
7. En la configuración de GitHub ir a SHH and GPG Keys. Alli se crea la llave pública agregando 
   el texto del documento id_rsa.pub

* Clonar un repositorio en entorno local:

1. En github, copiar el link del repositorio.
2. en GitBash, estando en la carpeta del proyecto, clonar el
   repositorio remoto con el siguiente comando:
   git remote add origin https://github.com/OscarDG/projecto_prueba.git
3. verificar que se ha creado con el comando - git remote. Al dar enter
   debe aparecer la palabra "origin".
4. al correr el comando git origin -v, aparece la dirección del origin
   para hacer fetch y push al repositorio remoto.

* Otra forma de mostrar historia con gráfico de branches en Git GitBash

1. agregar comando git log --all --graph
2. agregar comando git log --all --graph --decorate --oneline
3. para crear un alias más corto del comando puedo:
     * alias arbol="git log --all --graph --decorate --oneline"

* Crear un tag en el proyecto:

1. Copiar el HASH del commit en el que se quiere crear el tag.
2. para crear el tag se usa el comando:
     git tag -a v0.1 -m "Versión final del documento History" 1cea8a8 (el número al final es el hash)
3. para revisar los tags existentes se usa el comando:
     git tag
4. Para revisar a qué hash/commit está conectado un tag se usa el comando:
     git show-ref --tags
5. Para enviar al repositorio en GitHub los tags se usa el comando:
     git push origin --tags
6. para eliminar un tag errado uso el comando:
     git tag -d nombredeltag
7. Hacer push nuevamente de los tags existentes a GitHub
8. para borrar el tag definitivamente de Github se usa el comando:
     git push origin :refs/tags/nombredeltag

* Versión visual de la historia del proyecto:

1. Usar comando gitk

* Unirse a un repositorio en GitHub que ya existe:

1. Comando git clone "link del repositorio"


